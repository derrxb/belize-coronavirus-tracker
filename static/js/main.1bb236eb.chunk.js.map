{"version":3,"sources":["components/Chart.js","App.js","registerServiceWorker.js","index.js","belize-flag.png"],"names":["Chart","props","state","chartData","className","Date","now","toFixed","data","this","options","title","display","displayTitle","text","location","fontSize","legend","displayLegend","position","legendPosition","Component","defaultProps","App","getChartData","setState","labels","datasets","label","backgroundColor","src","logo","alt","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports"],"mappings":"iOAGMA,E,kDACJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,UAAUF,EAAME,WAHF,E,qDAehB,OACE,yBAAKC,UAAU,SACb,4BAAKC,KAAKC,MAAMC,WAChB,kBAAC,MAAD,CACEC,KAAMC,KAAKP,MAAMC,UACjBO,QAAS,CACPC,MAAO,CACLC,QAASH,KAAKR,MAAMY,aACpBC,KAAM,YAAaL,KAAKR,MAAMc,SAC9BC,SAAU,IAEZC,OAAQ,CACNL,QAASH,KAAKR,MAAMiB,cACpBC,SAAUV,KAAKR,MAAMmB,mBAI3B,kBAAC,MAAD,CACEZ,KAAMC,KAAKP,MAAMC,UACjBO,QAAS,CACPC,MAAO,CACLC,QAASH,KAAKR,MAAMY,aACpBC,KAAM,qBAAsBL,KAAKR,MAAMc,SACvCC,SAAU,IAEZC,OAAQ,CACNL,QAASH,KAAKR,MAAMiB,cACpBC,SAAUV,KAAKR,MAAMmB,mBAI3B,kBAAC,OAAD,CACEZ,KAAMC,KAAKP,MAAMC,UACjBO,QAAS,CACPC,MAAO,CACLC,QAASH,KAAKR,MAAMY,aACpBC,KAAM,qBAAsBL,KAAKR,MAAMc,SACvCC,SAAU,IAEZC,OAAQ,CACNL,QAASH,KAAKR,MAAMiB,cACpBC,SAAUV,KAAKR,MAAMmB,wB,GAzDfC,aAAdrB,EAQGsB,aAAe,CACpBT,cAAc,EACdK,eAAe,EACfE,eAAe,QACfL,SAAU,QAsDCf,QCRAuB,E,kDAvDb,WAAYtB,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,UAAWF,EAAME,WAHH,E,iEAQhBM,KAAKe,iB,qCAKLf,KAAKgB,SAAS,CACZtB,UAAW,CACTuB,OAAQ,CAAC,UAAW,cAAe,cAAe,OAAQ,cAAe,UACzEC,SAAU,CACR,CACEC,MAAO,QACPpB,KAAK,CACH,QACA,QACA,QACA,QACA,QACA,SAEFqB,gBAAgB,CAChB,0BACA,0BACA,0BACA,0BACA,2BACA,0BACA,kC,+BASR,OACE,yBAAKzB,UAAU,OACb,yBAAKA,UAAU,cACb,yBAAK0B,IAAKC,IAAM3B,UAAU,WAAW4B,IAAI,SACzC,yDAED,kBAAC,EAAD,CAAO7B,UAAWM,KAAKP,MAAMC,UAAWY,SAAS,SAASK,eAAe,gB,GAlDhEC,aCKZY,EAAcC,QACW,cAA7BC,OAAOpB,SAASqB,UAEe,UAA7BD,OAAOpB,SAASqB,UAEhBD,OAAOpB,SAASqB,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5C,QACfsC,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MChEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,8BAAwBxB,OAAOpB,UAC3C6C,SAAWzB,OAAOpB,SAAS6C,OAIvC,OAGFzB,OAAO0B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,8BAAN,sBAEN1B,EAwCX,SAAiCM,GAE/BuB,MAAMvB,GACHI,MAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,MAAK,SAAAC,GACjCA,EAAayB,aAAa1B,MAAK,WAC7BR,OAAOpB,SAASuD,eAKpBhC,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IACN,oEAzDAoB,CAAwBhC,GAHxBD,EAAgBC,OC7BxBiC,I,mBCPAC,EAAOC,QAAU,IAA0B,yC","file":"static/js/main.1bb236eb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Bar, Line, Pie } from 'react-chartjs-2';\n\nclass Chart extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      chartData:props.chartData\n    }\n  }\n\n  static defaultProps = {\n    displayTitle: true,\n    displayLegend: true,\n    legendPosition:'right',\n    location: 'City'\n  }\n\n  render(){\n    return (\n      <div className=\"chart\">\n        <h1>{Date.now().toFixed()}</h1>\n        <Bar\n          data={this.state.chartData}\n          options={{\n            title: {\n              display: this.props.displayTitle,\n              text: 'Cases in ' +this.props.location,\n              fontSize: 25\n            },\n            legend: {\n              display: this.props.displayLegend,\n              position: this.props.legendPosition\n            }\n          }}\n        />\n        <Pie\n          data={this.state.chartData}\n          options={{\n            title: {\n              display: this.props.displayTitle,\n              text: 'Largest Cities in ' +this.props.location,\n              fontSize: 25\n            },\n            legend: {\n              display: this.props.displayLegend,\n              position: this.props.legendPosition\n            }\n          }}\n        />\n        <Line\n          data={this.state.chartData}\n          options={{\n            title: {\n              display: this.props.displayTitle,\n              text: 'Largest Cities in ' +this.props.location,\n              fontSize: 25\n            },\n            legend: {\n              display: this.props.displayLegend,\n              position: this.props.legendPosition\n            }\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Chart;\n","import React, { Component } from 'react';\nimport logo from './belize-flag.png';\nimport './App.css';\nimport Chart from './components/Chart';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      chartData: props.chartData\n    }\n  }\n\n  componentWillMount(){\n    this.getChartData();\n  }\n\n  getChartData(){\n    //Ajax Call here\n    this.setState({\n      chartData: {\n        labels: ['Corozal', 'Orange Walk', 'Belize City', 'Cayo', 'Stann Creek', 'Toledo'],\n        datasets: [\n          {\n            label: 'Cases',\n            data:[\n              6175994,\n              1810450,\n              1530600,\n              1065190,\n              1051620,\n              9507200\n            ],\n            backgroundColor:[\n            'rgba(255, 99, 132, 0.6)',\n            'rgba(54, 162, 235, 0.6)',\n            'rgba(255, 206, 86, 0.6)',\n            'rgba(75, 192, 192, 0.6)',\n            'rgba(153, 102, 255, 0.6)',\n            'rgba(255, 159, 64, 0.6)',\n            'rgba(255, 99, 132, 0.6)'\n          ],\n          }\n        ]\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>Belize Coronavirus Cases</h2>\n        </div>\n         <Chart chartData={this.state.chartData} location=\"Belize\" legendPosition='bottom' />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","module.exports = __webpack_public_path__ + \"static/media/belize-flag.718e720a.png\";"],"sourceRoot":""}